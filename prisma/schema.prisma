// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id         String @id
    profileImg String @db.Text @default("https://ecsgjdvnggcyvhhseqso.supabase.co/storage/v1/object/public/profiles/default/avatar.png")

    email       String
    displayName String
    userName    String
    Status      Status  @default(ONLINE)
    color       String  @default("#000000")
    haveNitro   Boolean @default(false)

    servers     Server[]
    friendShips FriendShip[]
    members      Member[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Status {
    ONLINE
    IDLE
    DONT_DISTURB
    OFFLINE
}

model FriendShip {
    id       String @id @default(uuid())
    status   Status @default(ONLINE)
    friendId String
    userId   String
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([friendId])
    @@index([userId])
}

model Server {
    id String @id @default(uuid())

    imgUrl String @db.Text

    name String

    auther   User   @relation(fields: [autherId], references: [id], onDelete: Cascade)
    autherId String

    members  Member[]
    category Category[]
    rules    Rule[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([autherId])
}

enum ChannelType {
    TEXT
    VOICE
    VIDEO
}

model Channel {
    id   String @id @default(uuid())
    name String

    type ChannelType @default(TEXT)

    categoryId String
    category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    messages   Message[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([categoryId])
}

model Member {
    id String @id @default(uuid())

    autherId String
    auther   User   @relation(fields: [autherId], references: [id], onDelete: Cascade)

    serverId String
    server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

    messages Message[]
    rules    String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
   
    @@index([autherId])
    @@index([serverId])
}

model Rule {
    id              String   @id @default(uuid())
    name            String
    color           String
    CanViewChannels Boolean  @default(false)
    CanBan          Boolean  @default(false)
    Members         String[]
    isOwner         Boolean  @default(false)

    isAdmin Boolean @default(false)

    CanKick Boolean @default(false)

    CanMute Boolean @default(false)

    CanDeaf Boolean @default(false)

    CanManageServer Boolean @default(false)

    serverId String
    server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
   
    @@index([serverId])
}

model Message {
    id    String @id @default(uuid())
    title String @db.Text

    memberId String
    memeber  Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

    channelId String
    channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
    replyTo   String  @default("")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([memberId])
    @@index([channelId])
}

model Category {
    id        String    @id @default(uuid())
    title     String
    serverId  String
    server    Server    @relation(fields: [serverId], references: [id], onDelete: Cascade)
    channels  Channel[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@index([serverId])
}
