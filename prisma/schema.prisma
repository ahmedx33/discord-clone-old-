// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Status {
    ONLINE
    IDLE
    DONT_DISTURB
    OFFLINE
}

model User {
    id     String @id
    imgUrl String @db.Text

    email       String
    displayName String
    userName    String
    Status      Status @default(ONLINE)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    servers Server[]
    members Member[]
}

model Server {
    id String @id @default(uuid())

    imgUrl String @db.Text

    name String

    auther   User      @relation(fields: [autherId], references: [id], onDelete: Cascade)
    autherId String
    channels Channel[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    members  Member[]
    Category Category[]
    Rule     Rule[]

    @@index([autherId])
}

enum ChannelType {
    TEXT
    VOICE
    VIDEO
}

model Channel {
    id   String @id @default(uuid())
    name String

    type ChannelType @default(TEXT)

    categoryId String
    category   Server @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    messages Message[]

    @@index([categoryId])
}

model Member {
    id String @id @default(uuid())

    autherId String
    auther   User   @relation(fields: [autherId], references: [id], onDelete: Cascade)

    serverId String
    server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    messages Message[]
    rules    Rule[]

    @@index([autherId])
    @@index([serverId])
}

model Rule {
    id       String @id @default(uuid())
    name     String
    Member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
    memberId String

    ViewChannel     String
    CanBan          Boolean
    CanKick         Boolean
    CanMute         Boolean
    CanDeaf         Boolean
    CanManageServer Boolean

    serverId  String
    server    Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([memberId])
    @@index([serverId])
}

model Message {
    id    String @id @default(uuid())
    title String @db.Text

    memberId String
    memeber  Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

    channelId String
    channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    replyTo   String   @default("")

    @@index([memberId])
    @@index([channelId])
}

model Category {
    id       String @id @default(uuid())
    title    String
    serverId String
    server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

    @@index([serverId])
}
